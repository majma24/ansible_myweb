# Create an AWS EC2 instance and add a way to destroy it
---
- hosts: local
  connection: local

  vars:
    region: us-east-1
    prefix: myweb
    subnet_name: internal

  tasks:
  - name: Create a DNS Zone
    route53_zone:
      state: present
      zone: "{{ prefix }}.com"
      comment: "{{ prefix }}-dn"

  - name: Create a Virtual Private Cloud
    ec2_vpc_net:
      state: present
      name: "{{ prefix }}-vpc"
      cidr_block: 10.0.0.0/16
      region: "{{ region }}"
      dns_hostnames: no
      tenancy: default
      tags:
          Site: "{{ prefix }}.com"
          Name: "{{ prefix }}-vpc"
    register: vpc

  - name: Create a Security Group and allow inbound port(s)
    ec2_group:
      state: present
      name: "{{ prefix }}"
      description: Allow Ports
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ region }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
          rule_desc: SSH
      rules_egress:
        - proto: -1
          from_port: 0
          to_port: 0
          cidr_ip: 0.0.0.0/0
          rule_desc: All
      tags:
          Site: "{{ prefix }}.com"
          Name: "{{ prefix }}-sg"
    register: sg

  - name: Add a Subnet
    ec2_vpc_subnet:
      state: present
      vpc_id: "{{ vpc.vpc.id }}"
      cidr: 10.0.1.0/24
      region: "{{ region }}"
      az: "{{ region }}a"
      tags:
          Site: "{{ prefix }}.com"
          Name: "{{ subnet_name }}"
    register: internal

  - name: Create an Internet Gateway
    ec2_vpc_igw:
      state: present
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ region }}"
      tags:
          Site: "{{ prefix }}.com"
          Name: "{{ prefix }}-igw"
    register: igw

  - name: Add a route to the Internet Gateway
    ec2_vpc_route_table:
      state: present
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ region }}"
      subnets: "{{ internal.subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id }}"
      tags:
          Site: "{{ prefix }}.com"
          Name: "{{ prefix }}-rt"

  - name: Add Public Key as authorized
    ec2_key:
      state: present
      name: "{{ prefix }}"
      key_material: "{{ lookup('file', '~/.ssh/{{ prefix }}.pub') }}"
      region: "{{ region }}"

  - name: Select Ubuntu 18.04
    ec2_ami_info:
      region: "{{ region }}"
      owners: 099720109477 # Canonical
      filters:
        name: "ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-*"
    register: ec2_ami

    # Get the latest Ubuntu 18.04 AMI
  - set_fact:
      ec2_ami_latest: "{{ ec2_ami.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}"

  - name: Create an Ubuntu Virtual Machine with key based access and run a script on boot
    ec2_instance:
      state: present
      name: "{{ prefix }}-ec2"
      key_name: "{{ prefix }}"
      region: "{{ region }}"
      instance_type: t3a.micro
      image_id: "{{ ec2_ami_latest.image_id }}"
      security_group: "{{ sg.group_id }}"
      wait: yes
      wait_timeout: 500
      vpc_subnet_id: "{{ internal.subnet.id }}"
      tenancy: default
      user_data: "{{ lookup('file', './scripts/install.sh') }}"
      tags:
          Site: "{{ prefix }}.com"
    register: ec2

  - name: Allocate and Associate a Static Public IP
    ec2_eip:
      state: present
      region: "{{ region }}"
      in_vpc: yes
      reuse_existing_ip_allowed: yes
      device_id: "{{ ec2.instance_ids[0] }}"
    register: eip

  - debug: msg="Public IP (Static) is {{ eip.public_ip }} for {{ ec2.instances[0].tags.Name }}"
    when: eip.public_ip is defined

  - debug: msg="Run this playbook for {{ ec2.instances[0].tags.Name }} shortly to Allocate, Associate and list the Static Public IP."
    when: eip.public_ip is not defined

  - name: Destroy the Elastic IP
    # Gather EC2 info.
    ec2_instance_info:
      filters:
        tag:Site: "{{ prefix }}.com"
        tag:Name: "{{ prefix }}-ec2"
        instance-state-name: [ "running", "present", "started", "stopped" ]
    register: ec2
    tags: [ 'never', 'destroy' ]

    # Gather EIP info.
  - ec2_eip_info:
      filters:
        instance-id: "{{ ec2.instances[0].instance_id }}"
    register: eip
    when: ec2.instances[0].instance_id is defined
    tags: [ 'never', 'destroy' ]

  - ec2_eip:
      state: absent
      region: "{{ region }}"
      device_id: "{{ eip.addresses[0].instance_id }}"
      release_on_disassociation: yes
    when: eip.addresses[0].instance_id is defined
    tags: [ 'never', 'destroy' ]

  - name: Destroy the Elastic Compute 2 instance
    ec2_instance:
      state: absent
      instance_ids: "{{ ec2.instances[0].instance_id }}"
    when: ec2.instances[0].instance_id is defined
    tags: [ 'never', 'destroy' ]

  - name: Destroy the Public Key
    ec2_key:
      state: absent
      name: "{{ prefix }}"
    tags: [ 'never', 'destroy' ]

  - name: Destroy the Route to the Internet Gateway
    # Gather Route info.
    ec2_vpc_route_table_info:
      region: "{{ region }}"
      filters:
        tag:Site: "{{ prefix }}.com"
        tag:Name: "{{ prefix }}-rt"
    register: rt
    tags: [ 'never', 'destroy' ]

  - ec2_vpc_route_table:
      state: absent
      vpc_id: "{{ rt.route_tables[0].vpc_id }}"
      region: "{{ region }}"
      route_table_id: "{{ rt.route_tables[0].id }}"
      lookup: id
    when: rt.route_tables[0].vpc_id is defined
    tags: [ 'never', 'destroy' ]

  - name: Destroy the Subnet
    # Gather Subnet info.
    ec2_vpc_subnet_info:
      filters:
        tag:Site: "{{ prefix }}.com"
        tag:Name: "{{ subnet_name }}"
    register: internal
    tags: [ 'never', 'destroy' ]

  - ec2_vpc_subnet:
      state: absent
      vpc_id: "{{ internal.subnets[0].vpc_id }}"
      cidr: "{{ internal.subnets[0].cidr_block }}"
      when: internal.subnets[0].vpc_id is defined
    tags: [ 'never', 'destroy' ]

  - name: Destroy the Internet Gateway
    # Gather IGW info.
    ec2_vpc_igw_info:
      filters:
        tag:Site: "{{ prefix }}.com"
        tag:Name: "{{ prefix }}-igw"
    register: igw
    tags: [ 'never', 'destroy' ]

  - ec2_vpc_igw:
      state: absent
      vpc_id: "{{ igw.internet_gateways[0].attachments[0].vpc_id }}"
      region: "{{ region }}"
    when: igw.internet_gateways[0].attachments[0].vpc_id is defined
    tags: [ 'never', 'destroy' ]

  - name: Destroy the Security Group
    # Gather SG info.
    ec2_group_info:
      filters:
        tag:Site: "{{ prefix }}.com"
        tag:Name: "{{ prefix }}-sg"
    register: sg
    tags: [ 'never', 'destroy' ]

  - ec2_group:
      state: absent
      group_id: "{{ sg.security_groups[0].group_id }}"
    when: sg.security_groups[0].group_id is defined
    tags: [ 'never', 'destroy' ]

  - name: Destroy the Virtual Private Cloud
    # Gather VPC info.
    ec2_vpc_net_info:
      filters:
        tag:Site: "{{ prefix }}.com"
        tag:Name: "{{ prefix }}-vpc"
    register: vpc
    tags: [ 'never', 'destroy' ]

  - ec2_vpc_net:
      state: absent
     name: "{{ prefix }}-vpc"
      cidr_block: "{{ vpc.vpcs[0].cidr_block }}"
      region: "{{ region }}"
    when: vpc.vpcs[0].cidr_block is defined
    tags: [ 'never', 'destroy' ]

  - name: Destroy the DNS Zone
    route53_zone:
      state: absent
      zone: "{{ prefix }}.com"
      tags: [ 'never', 'destroy' ]
